Retrieve the total number of orders placed.

SELECT COUNT(ORDER_ID) FROM ORDERS ;


Calculate the total revenue generated from pizza sales.

SELECT 
ROUND(SUM(order_details.QUANTITY * pizzas.price),2)
FROM
order_details
JOIN
pizzas ON pizzas.pizza_id = ORDER_DETAILS.PIZZA_ID;


Identify the highest-priced pizza.

SELECT pizza_types.name , pizzas.price
FROM pizza_types JOIN pizzas
ON  pizza_types.pizza_type_id= pizzas.pizza_type_id
order by pizzas.price  DESC
limit 1;


Identify the most common pizza size ordered.

SELECT pizzas.size , COUNT(order_details.order_id) AS order_count
FROM pizzas 
JOIN order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzas.size
ORDER BY order_count DESC
LIMIT 1;



List the top 5 most ordered pizza types along with their quantities.

select pizza_types.name , sum(order_details.quantity) as quantity
from pizza_types 
join pizzas on pizza_types.pizza_type_id= pizzas.pizza_type_id
join order_details on order_details.PIZZA_ID = pizzas.pizza_id
group by pizza_types.name 
order by QUANTITY desc limit 5;


Join the necessary tables to find the total quantity of each pizza category ordered

SELECT pizza_types.category, SUM(order_details.quantity) AS total_quantity
FROM order_details
JOIN pizzas ON pizzas.pizza_id = order_details.pizza_id
JOIN pizza_types ON pizza_types.pizza_type_id = pizzas.pizza_type_id
GROUP BY pizza_types.category;


Calculate top pizza type by revenue.

select pizza_types.name , round (sum(order_details.QUANTITY*pizzas.price) , 0) as quantity
from pizza_types join pizzas
on pizza_types.pizza_type_id = pizzas.pizza_type_id
join order_details
on order_details.PIZZA_ID = pizzas.pizza_id
group by pizza_types.name 
order by QUANTITY desc  limit 5; 


Join relevant tables to find the category-wise distribution of pizzas.

select  pizza_types.category , round(sum(order_details.QUANTITY * pizzas.price )/(select sum(order_details.QUANTITY * pizzas.price )
from order_details
join pizzas on
order_details.PIZZA_ID = pizzas.pizza_id ) * 100 , 2) as 'total revenue'
from pizza_types join pizzas on 
pizza_types.pizza_type_id=pizzas.pizza_type_id
join order_details on 
order_details.PIZZA_ID = pizzas.pizza_id
group by pizza_types.category
order by total revenue desc ;


Show category-wise revenue distribution.

SELECT pizza_types.category, 
ROUND((SUM(order_details.quantity * pizzas.price) / 
(SELECT SUM(order_details.quantity * pizzas.price)
FROM order_details
JOIN pizzas ON pizzas.pizza_id = order_details.pizza_id)) * 100, 2) AS revenue_percentage
FROM pizza_types
JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY revenue_percentage DESC;


Determine the top 3 most ordered pizza types based on revenue.


WITH PizzaRevenue AS (
SELECT 
pizza_types.category,
pizza_types.name AS pizza_type_name,
SUM(order_details.quantity * pizzas.price) AS total_revenue,
DENSE_RANK() OVER (PARTITION BY pizza_types.category ORDER BY SUM(order_details.quantity * pizzas.price) DESC) 
 AS rank_position
FROM order_details
JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id
JOIN pizza_types ON pizzas.pizza_type_id = pizza_types.pizza_type_id
GROUP BY pizza_types.category, pizza_types.name
)
SELECT 
    category,
    pizza_type_name,
    total_revenue,
    rank_position
FROM PizzaRevenue
WHERE rank_position <= 3
ORDER BY category, rank_position;


Group the orders by date and calculate the average number of pizzas ordered per day.

SELECT ROUND(AVG(daily_pizzas), 2) AS avg_pizzas_per_day
FROM (
SELECT order_date, SUM(order_details.quantity) AS daily_pizzas
FROM orders
JOIN order_details ON orders.order_id = order_details.order_id
 GROUP BY order_date
) AS subquery;



